import asyncio
from telethon import TelegramClient, events, Button
from telethon.errors.rpcerrorlist import ChannelPrivateError
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
api_id = '20909352'
api_hash = 'a3be2584a77447cfc0c7d1595076e9dc'
phone_number = '+923559486166'

# ID –∫–∞–Ω–∞–ª–æ–≤
source_channel_id = -1002454039581  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (1)
target_channel_id = -1002212238461  # ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (1)
source_channel_id_2 = -1002335869892  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (2)
target_channel_id_2 = -1002283473746  # ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (2)
source_channel_id_3 = -1002485605769 # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (3) –¥–ª—è NFT —É–ª—É—á—à–µ–Ω–∏–π
target_channel_id_3 = -1002212238461  # ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (3) –¥–ª—è NFT —É–ª—É—á—à–µ–Ω–∏–π

# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
username = '@asteroalex'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('session_name', api_id, api_hash)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def periodic_messages():
    while True:
        try:
            await client.send_message(username, "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–±–æ—Ç–∞—é")
        except ValueError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º.")
        await asyncio.sleep(1800)  # 900 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def send_startup_message():
    try:
        await client.send_message(username, "–ó–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except ValueError:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è supply
def format_supply(supply):
    supply = int(supply)
    if supply >= 1000:
        return f"{supply // 1000}k"
    return str(supply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@client.on(events.NewMessage(chats=source_channel_id))
async def handler(event):
    message = event.message.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–≤–æ "LIMITED"
    if "LIMITED" in message:
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π price –∏ supply
            price_match = re.search(r"Price: (\d+)", message)
            supply_match = re.search(r"LIMITED \((\d+)\)", message)

            if price_match and supply_match:
                price = price_match.group(1)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ price
                supply = format_supply(supply_match.group(1))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º supply

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
                new_message = (
                    f"‚¨ÜÔ∏è <b>New gift! –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
                    f"Price: <code>{price}</code>‚òÖ (<b>limited:</b> {supply} gifts only)\n\n"
                    f"<b>üéÅ <a href='https://t.me/AutoGiftRobot?start=_tgr_D7aIRUlmM2Yy'>@AutoGiftRobot</a> ‚Ä¢ @TGGiftsNews</b>\n"
                    f"<b>üå∏ <a href='https://t.me/tonnel_network_bot/gifts?startapp=ref_1267171169'>–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏</a></b>"
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
                await client.send_message(
                    target_channel_id,
                    new_message,
                    buttons=[[Button.inline("Copy Gift ID", data="N/A")]],
                    parse_mode='html',
                    link_preview=False  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
                )
        except ChannelPrivateError:
            print("Failed to send message: Bot lacks permission to access the target channel.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "LIMITED", –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "Price:")
    elif "Price:" in message and "LIMITED" not in message:
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è price
            price_match = re.search(r"Price: (\d+)", message)

            if price_match:
                price = price_match.group(1)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ price

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
                new_message = (
                    f"‚¨ÜÔ∏è <b>New gift! –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
                    f"Price: <code>{price}</code>‚òÖ\n\n"
                    f"<b>üéÅ <a href='https://t.me/AutoGiftRobot?start=_tgr_D7aIRUlmM2Yy'>@AutoGiftRobot</a> ‚Ä¢ @TGGiftsNews</b>\n"
                    f"<b>üå∏ <a href='https://t.me/tonnel_network_bot/gifts?startapp=ref_1267171169'>–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏</a></b>"
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
                await client.send_message(
                    target_channel_id,
                    new_message,
                    buttons=[[Button.inline("Copy Gift ID", data="N/A")]],
                    parse_mode='html',
                    link_preview=False  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
                )
        except ChannelPrivateError:
            print("Failed to send message: Bot lacks permission to access the target channel.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if event.message.sticker or (event.message.file and event.message.file.mime_type == "application/x-tgsticker"):
        try:
            await client.send_file(target_channel_id, event.message.media)
        except ChannelPrivateError:
            print("Failed to send sticker: Bot lacks permission to access the target channel.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@client.on(events.NewMessage(chats=source_channel_id_2))
async def handler_2(event):
    message = event.message.message
    if "Roxman @borz bought" in message:
        parts = message.split()
        number_of_stars = parts[3]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "bought"
        amount_ton = parts[6]  # –°—É–º–º–∞ TON –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "TON"
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ "‚Äî"
        date_time_str = message.split('‚Äî ')[1]
        new_message = f"Roxman –∫—É–ø–∏–ª <b>{number_of_stars}‚≠ê</b> –∑–∞ <b>{amount_ton}</b> TON ‚Äî {date_time_str}"
        try:
            await client.send_message(target_channel_id_2, new_message, parse_mode='html')
        except ChannelPrivateError:
            print("Failed to send message: Bot lacks permission to access the target channel.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if event.message.sticker or (event.message.file and event.message.file.mime_type == "application/x-tgsticker"):
        try:
            await client.send_file(target_channel_id_2, event.message.media)
        except ChannelPrivateError:
            print("Failed to send sticker: Bot lacks permission to access the target channel.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è NFT —É–ª—É—á—à–µ–Ω–∏–π
@client.on(events.NewMessage(chats=source_channel_id_3))
async def handler_3(event):
    message = event.message.message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ "NFT upgrade available"
    if "upgrade available" in message:
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è NFT —É–ª—É—á—à–µ–Ω–∏–π
            new_message = (
                f"üÜï <b>New NFT upgrades! –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è!</b>\n\n"
                f"<code>–ü–æ–¥–∞—Ä–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ NFT —Å–∫–∏–Ω—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥</code>\n\n"
                f"<b>üéÅ <a href='https://t.me/AutoGiftRobot?start=_tgr_D7aIRUlmM2Yy'>@AutoGiftRobot</a> ‚Ä¢ @TGGiftsNews</b>\n"
                f"<b>üå∏ <a href='https://t.me/tonnel_network_bot/gifts?startapp=ref_1267171169'>–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏</a></b>"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
            await client.send_message(
                target_channel_id_3,
                new_message,
                parse_mode='html',
                link_preview=False  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫
            )
        except ChannelPrivateError:
            print("Failed to send message: Bot lacks permission to access the target channel.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@client.on(events.CallbackQuery)
async def callback_query_handler(event):
    data = event.data.decode('utf-8')
    await event.answer(f"Gift ID: {data}", alert=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await client.start(phone=phone_number)
    print("Client Created")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await send_startup_message()
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(periodic_messages())
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())